@model HospiceNiagara.Models.Meeting

@*Andreas King March 2015*@

@{
    ViewBag.Title = "Meetings and Events";
}
@*<div class="container">
    <div class="col-md-12">
        @{
            bool firstPanel = false;
            foreach (var item in (IEnumerable<HospiceNiagara.Models.Meeting>)ViewData["Meeting"])
            {
                <div class="col-sm-6 col-md-6">
                    <div class="panel panel-success">
                        <div class="panel-heading">
                            @if (User.IsInRole("Administrator") && firstPanel == false)
                            {
                                <div id="glyphAddEvent" class="glyphicon glyphicon-plus pull-right"></div>
                            }
                            <h3 id="EventsTitle" class="panel-title">@item.EventTitle</h3>
                            <h3 id="newMeetingEventTitle" class="panel-title" hidden>New Event/Meeting</h3>
                        </div>
                        <div @{ if(firstPanel==false){
                                @:id="EventPanel"
                            }} class="panel-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div id="myCarousel-@item.ID" class="carousel slide" data-ride="carousel">
                                        <div class="carousel-inner" role="listbox">
                                            @{
                                                var count = 0;
                                                foreach (var f in item.FileStores)
                                                {
                                                    if (f.FileContent != null && f.MimeType.Contains("image"))
                                                    {
                                                        if (count == 0)
                                                        {
                                                            <div class="item active listIMG">
                                                                @{
                                                            string image64 = Convert.ToBase64String(f.FileContent);
                                                            string imageSrc = string.Format("data:" + f.MimeType + ";base64, {0}", image64);
                                                                }
                                                                <img src="@imageSrc" />
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            <div class="item listIMG">
                                                                @{
                                                            string image64 = Convert.ToBase64String(f.FileContent);
                                                            string imageSrc = string.Format("data:" + f.MimeType + ";base64, {0}", image64);
                                                                }
                                                                <img src="@imageSrc" />
                                                            </div>
                                                        }
                                                        count++;
                                                    }
                                                }
                                        </div>

                                        <a class="left carousel-control" href="#myCarousel-@item.ID" role="button" data-slide="prev">
                                            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                            <span class="sr-only">Previous</span>
                                        </a>
                                        <a class="right carousel-control" href="#myCarousel-@item.ID" role="button" data-slide="next">
                                            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                            <span class="sr-only">Next</span>
                                        </a>
                                    </div>
                                </div>
                                <div class="col-md-6">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>*@

@* Makes content span the whole page *@
<div class="col-sm-12">
    @* Meeting Panel *@
    <div class="panel panel-success">
        @* Panel Heading *@
        <div class="panel-heading">
            <span id="EventsTitle">Events</span>
            <span id="newMeetingEventTitle" hidden>New Event</span>
                @if (User.IsInRole("Administrator"))
                {
                <div id="glyphAddEvent" class="glyphicon glyphicon-plus pull-right"></div>
                }
        </div>
        @* Main Body *@
        <div class="panel-body" id="EventPanel">
                
                @Html.ActionLink("View RSVP requests", "../MeetingUserRSVPs/Index")                    
                
            <table class="table">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.EventTitle)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EventDiscription)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EventLocation)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EventStartString)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EventEndString)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EventRequirments)
                    </th>
                    @if (User.IsInRole("Administrator"))
                    {
                        <th></th>
                    } 
                </tr>

                @foreach (var item in (IEnumerable<HospiceNiagara.Models.Meeting>)ViewData["Meeting"])
                {
                    <tr>
                        <td>
                            @{var url = Request.Url.PathAndQuery;}
                            @if(url.EndsWith("Meeting/Index"))
                            {
                            <a href=Details/@item.ID>@Html.DisplayFor(modelItem => item.EventTitle)</a>
                            }
                            else
                            {
                            <a href=Meeting/Details/@item.ID>@Html.DisplayFor(modelItem => item.EventTitle)</a>
                            }
                                
                        </td>
                        <td>
                            @Html.Raw(item.DescriptionTrimmed.Replace("\n", "<br />"))
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EventLocation)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EventStartString)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EventEndString)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EventRequirments)
                        </td>
                        @if (User.IsInRole("Administrator"))
                        {
                        <td>
                            @Html.ActionLink("Edit", "Edit", new { id = item.ID }) 
                            @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                        </td>
                        }
                    </tr>
                }

            </table>
        </div>
        @* New Meeting Body *@
        <div class="panel-body" id="NewEvent" hidden>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>MeetingOrEvent</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.EventTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventDiscription, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.EventDiscription, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventDiscription, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventStart, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventStart, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventStart, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventEnd, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventEnd, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventEnd, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventRequirments, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventRequirments, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventRequirments, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EventLinks, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EventLinks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EventLinks, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-2">User Roles</label>
                        <div class="col-md-offset-2 col-md-10">
                            <table>
                                <tr>
                                    @{
                                        int cnt = 0;
                                        List<HospiceNiagara.ViewModels.RoleVM> roles = ViewBag.RolesLists;
                                        foreach(var r in roles)
                                        {
                                            if (cnt++ % 2 == 0)
                                            {
                                            @:</tr><tr>
                                            }
                                            @:<td>
                                                <input type="checkbox"
                                                name="selectedRoles"
                                                value="@r.RoleID"
                                                @(Html.Raw(r.RoleAssigned ? "checked=\"checked\"" : "")) />
                                                @r.RoleName
                                            @:</td>
                                        }
                                    @:</tr>
                                    }
                            </table>
                        </div>
                    </div>

                    <div class="form-group">
                            <div class="col-md-4">
                                <label class="control-label">Selected Files</label>
                                @Html.ListBox("selectedFiles", (MultiSelectList)ViewBag.selFiles, new { @class = "form-control" })
                            </div>
                            <div id="selectButtons" class="form-group col-md-4 text-center">
                                <div class="select-button text-center">
                                    <button type="button" id="btnFileRight" class="btn btn-warning">
                                        <span class="glyphicon glyphicon-arrow-right" aria-hidden="true"></span>
                                    </button>
                                </div>
                                <div class="select-button">
                                    <button type="button" id="btnFileLeft" class="btn btn-success">
                                        <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label class="control-label">Availible Files</label>
                                @Html.ListBox("availibleFiles", (MultiSelectList)ViewBag.avlFiles, new { @class = "form-control" })
                            </div>
                        </div>                        

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" id="btnSubmit" name="CreateMeeting" class="btn btn-primary" />
                            @Html.ActionLink("Cancel", "Index")
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="col-sm-4" id="panelEventDesc" hidden>
    <div class="panel panel-success">
        <div class="panel-heading">
            Description
        </div>
        <div class="panel-body">
            <p>

            </p>
        </div>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/bundles/MultiSelectlist")
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            $('#glyphAddEvent').on('click', function () {
                $('#EventsTitle').slideToggle();
                $('#EventPanel').slideToggle();
                $('#NewEvent').slideToggle();
                $('#newMeetingEventTitle').slideToggle();
                $('#glyphAddEvent').fadeToggle();
            });

            $('textarea').htmlarea();

            resizeHtmlEditor();
            $(window).resize(resizeHtmlEditor);

            $("[name='selectedRoles']").bootstrapSwitch();

            function resizeHtmlEditor() {
                $('div.jHtmlArea').find('div.ToolBar').css('width', '100%');
                $('div.jHtmlArea iframe').css('width', '100%');
                $('div.jHtmlArea iframe').css('height', '100%');
                $('div.jHtmlArea iframe').parent().css('width', '100%');
            }
        });
    </script>
}
